// Módulos
import Head from 'next/head'
import {
  Tabs,
  TabList,
  TabPanels,
  TabPanel,
  Icon,
  useBreakpointValue,
} from '@chakra-ui/react'
import { MdArticle } from 'react-icons/md'
import { FaComment } from 'react-icons/fa'
import _ from 'lodash'

// Diretórios
import { Layout } from '../../components/Layout'
import { CustomTab } from '../../components/CustomTab'
import { Post } from '../../components/Post'
import { Reply } from '../../components/Reply'
import { Profile } from '../../components/Profile'
import { FullPageLoader } from '../../components/FullPageLoader'
import { getUserByIdentity } from '../../helpers/getUserByIdentity'
import { getPostsByIdentity } from '../../helpers/getPostsByIdentity'
import { getCommentsByidentity } from '../../helpers/getCommentsByidentity'

export default function UserPage({ postProps, userProps, commentProps }) {
  const borderRadius = useBreakpointValue({ base: 'none', md: 'lg' })
  const iconSize = useBreakpointValue({ base: 5, md: 6 })

  if (_.isEmpty(postProps) || _.isEmpty(userProps) || _.isEmpty(commentProps))
    return <FullPageLoader />
  const user = JSON.parse(userProps)
  const posts = JSON.parse(postProps)
  const comments = JSON.parse(commentProps)

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <Profile user={user} />
        <Tabs mt={4}>
          <TabList shadow="md" borderRadius={borderRadius}>
            <CustomTab borderLeftRadius={borderRadius}>
              <Icon as={MdArticle} w={iconSize} h={iconSize} mr={1} />
              Publicações
            </CustomTab>
            <CustomTab borderRightRadius={borderRadius}>
              <Icon as={FaComment} w={iconSize} h={iconSize} mr={1} />
              Comentários
            </CustomTab>
          </TabList>
          <TabPanels>
            <TabPanel p={0}>
              {posts.map(post => (
                <Post key={post.id} post={post} mt={4} />
              ))}
            </TabPanel>
            <TabPanel p={0}>
              {comments.map(comment => (
                <Reply
                  key={comment.id}
                  reply={comment}
                  shadow="md"
                  borderWidth={0}
                  mt={4}
                />
              ))}
            </TabPanel>
          </TabPanels>
        </Tabs>
      </Layout>
    </div>
  )
}

export function getStaticPaths() {
  return {
    paths: [],
    fallback: true,
  }
}

export const getStaticProps = async context => {
  const identity = context.params.userId
  const posts = await getPostsByIdentity(identity)
  const comments = await getCommentsByidentity(identity)

  const id = context.params.userId
  const user = await getUserByIdentity(id)

  return {
    props: {
      userProps: JSON.stringify(user) || null,
      postProps: JSON.stringify(posts) || null,
      commentProps: JSON.stringify(comments) || null,
    },
    revalidate: 1,
  }
}
