/* eslint-disable react/no-children-prop */
// Módulos
import Router from 'next/router'
import Head from 'next/head'
import NextLink from 'next/link'
import { useForm } from 'react-hook-form'
import { yupResolver } from '@hookform/resolvers/yup'
import {
  Center,
  VStack,
  Heading,
  Button,
  InputGroup,
  InputLeftElement,
  Input,
  Text,
  Flex,
  Box,
  Divider,
  useColorModeValue,
  Link,
  chakra,
  FormControl,
  FormErrorMessage,
  useToast,
} from '@chakra-ui/react'
import { MdPerson, MdEmail, MdLock } from 'react-icons/md'

// Diretórios
import { Layout } from '../components/Layout'
import { Card } from '../components/Card'
import { useAuth } from '../hooks/useAuth'
import { PrivateRoute } from '../components/PrivateRoute'
import { schema } from '../utils/schema'

export default function SignUp() {
  const secondaryColor = useColorModeValue('#4A5568', '#CBD5E0')
  const { signUp, currentUser } = useAuth()
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm({ resolver: yupResolver(schema.signUp) })
  const toast = useToast()

  const onSubmit = async data => {
    try {
      await signUp(data.name, data.email, data.password)
      toast({
        description: 'Você entrou em sua conta com sucesso.',
        status: 'success',
      })
      Router.replace('/')
    } catch (error) {
      toast({
        description: error.message,
        status: 'error',
      })
      Router.replace('/')
    }
  }

  return (
    <PrivateRoute isProtected={currentUser}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
        <chakra.form onSubmit={handleSubmit(onSubmit)}>
          <Center>
            <Card as={VStack} spacing={4} w={96} p={8}>
              <Heading size="lg">Criar conta no Uerita</Heading>
              <NextLink href={`/signin`} passHref>
                <Link>
                  <Text color={secondaryColor}>Já possui uma conta?</Text>
                </Link>
              </NextLink>
              <FormControl isInvalid={errors.name}>
                <InputGroup>
                  <InputLeftElement
                    pointerEvents="none"
                    children={<MdPerson color={secondaryColor} />}
                  />
                  <Input
                    variant="filled"
                    type="text"
                    placeholder="Nome"
                    {...register('name')}
                  />
                </InputGroup>
                <FormErrorMessage>{errors.name?.message}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={errors.email}>
                <InputGroup>
                  <InputLeftElement
                    pointerEvents="none"
                    children={<MdEmail color={secondaryColor} />}
                  />
                  <Input
                    variant="filled"
                    type="email"
                    placeholder="E-mail"
                    {...register('email')}
                  />
                </InputGroup>
                <FormErrorMessage>{errors.email?.message}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={errors.password}>
                <InputGroup>
                  <InputLeftElement
                    pointerEvents="none"
                    children={<MdLock color={secondaryColor} />}
                  />
                  <Input
                    variant="filled"
                    type="password"
                    placeholder="Senha"
                    {...register('password')}
                  />
                </InputGroup>
                <FormErrorMessage>{errors.password?.message}</FormErrorMessage>
              </FormControl>
              <FormControl isInvalid={errors.confirmPassword}>
                <InputGroup>
                  <InputLeftElement
                    pointerEvents="none"
                    children={<MdLock color={secondaryColor} />}
                  />
                  <Input
                    variant="filled"
                    type="password"
                    placeholder="Confirmar senha"
                    {...register('confirmPassword')}
                  />
                </InputGroup>
                <FormErrorMessage>
                  {errors.confirmPassword && 'passwords should match'}
                </FormErrorMessage>
              </FormControl>
              <Text fontSize="sm" textAlign="center" color={secondaryColor}>
                Ao se cadastrar, você aceita nossos termos de uso e a nossa
                política de privacidade.
              </Text>
              <Button isFullWidth type="submit" variant="brand">
                Cadastrar
              </Button>
              <Flex w="full" align="center">
                <Box flex="1">
                  <Divider borderColor="gray.300" />
                </Box>
                <Text as="span" px="3" color={secondaryColor} fontSize="sm">
                  Ou cadastre-se com
                </Text>
                <Box flex="1">
                  <Divider borderColor="gray.300" />
                </Box>
              </Flex>
              <Button colorScheme="red" variant="outline" isFullWidth>
                Google
              </Button>
              <Button variant="black" isFullWidth>
                Apple
              </Button>
              <Button colorScheme="blue" variant="outline" isFullWidth>
                Facebook
              </Button>
            </Card>
          </Center>
        </chakra.form>
      </Layout>
    </PrivateRoute>
  )
}
